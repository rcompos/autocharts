{{- range $key, $val := .Values.apps }}
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  {{- if $val.fullnameOverride }}
  name: {{ $val.fullnameOverride }}
  {{- else }}
  name: {{ $val.name }}
  {{- end }}
  namespace: argocd
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  labels:
    name: {{ $val.name }}
spec:
  project: {{ $.Values.spec.project }}
  source:
    {{- if $val.repo }}
    repoURL: {{ $val.repo }}
    {{- else }}
    repoURL: {{ $.Values.spec.source.repoURL }}
    {{- end }}
    {{- if $val.targetRev }}
    targetRevision: {{ $val.targetRev }}
    {{- else }}
    targetRevision: {{ $.Values.spec.source.targetRevision }}
    {{- end }}
    {{- if $val.path }}
    path: {{ $val.path }}
    {{- else }}
    path: {{ $val.name }} 
    {{- end }}
    helm:
      valueFiles:
        {{- if $val.values }}
        {{- range $val.values }}
        - {{ . }}
        {{- end }}
        {{- else }}
        {{- range $.Values.valueFiles }}
        - {{ . }}
        {{- end }}
        {{- end }}
      version: v3

    # plugin:
    #   # Only set the plugin name if the plugin is defined in argocd-cm.
    #   # If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the
    #   # Application according to the plugin's discovery rules.
    #   name: mypluginname
    #   # environment variables passed to the plugin
    #   env:
    #     - name: FOO
    #       value: bar

  # Destination cluster and namespace to deploy the application
  destination:
    server: {{ $.Values.spec.destination.server }}
    {{- if $val.namespace }}
    # The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
    namespace: {{ $val.namespace }}
    {{- else if $val.fullnameOverride }}
    namespace: {{ $.Values.spec.destination.namePrefix }}{{ $val.fullnameOverride }}
    {{- else }}
    namespace: {{ $.Values.spec.destination.namePrefix }}{{ $val.name }}
    {{- end }}

  # Sync policy
  syncPolicy:
    automated: # automated sync by default retries failed attempts 5 times with following delays between attempts ( 5s, 10s, 20s, 40s, 80s ); retry controlled using `retry` field.
      prune: true # Specifies if resources should be pruned during auto-syncing ( false by default ).
      selfHeal: true # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).
      allowEmpty: false # Allows deleting all application resources during automatic syncing ( false by default ).
    syncOptions:     # Sync options which modifies sync behavior
    - Validate=false # disables resource validation (equivalent to 'kubectl apply --validate=false') ( true by default ).
    - CreateNamespace=true # Namespace Auto-Creation ensures that namespace specified as the application destination exists in the destination cluster.
    - PrunePropagationPolicy=foreground # Supported policies are background, foreground and orphan.
    - PruneLast=true # Allow the ability for resource pruning to happen as a final, implicit wave of a sync operation
    # The retry feature is available since v1.7
    retry:
      limit: 5 # number of failed sync attempt retries; unlimited number of attempts if less than 0
      backoff:
        duration: 5s # the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        factor: 2 # a factor to multiply the base duration after each failed retry
        maxDuration: 3m # the maximum amount of time allowed for the backoff strategy

  # Will ignore differences between live and desired states during the diff. Note that these configurations are not
  # used during the sync process.
  {{- if $val.ignoreDiffs }}
  ignoreDifferences:
  # for the specified json pointers
  - group: apps
    kind: Deployment
    jsonPointers:
    - /spec/replicas
  # for the specified managedFields managers
  - group: "*"
    kind: "*"
    managedFieldsManagers:
    - kube-controller-manager
  {{- end }}
    
  # RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for
  # informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional
  # circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the
  # space used to store the history, so we do not recommend increasing it.
  revisionHistoryLimit: 10
---
{{- end }}
